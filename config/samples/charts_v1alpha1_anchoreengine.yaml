apiVersion: charts.anchore.io/v1alpha1
kind: AnchoreEngine
metadata:
  name: anchoreengine-sample
spec:
  # Default values copied from <project_dir>/helm-charts/anchore-engine/values.yaml
  anchore-feeds-db:
    affinity: {}
    deploymentAnnotations: {}
    externalEndpoint: null
    extraEnv: []
    global: {}
    image: postgres:9.6.18
    metrics:
      enabled: false
      image: wrouesnel/postgres_exporter
      imagePullPolicy: IfNotPresent
      imageTag: v0.4.6
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
    networkPolicy:
      allowExternal: true
      enabled: false
    nodeSelector: {}
    persistence:
      accessMode: ReadWriteOnce
      enabled: true
      mountPath: /var/lib/postgresql/data/pgdata
      resourcePolicy: nil
      size: 20Gi
      subPath: postgresql-db
    podAnnotations: {}
    postgresDatabase: anchore-feeds
    postgresPassword: anchore-postgres,123
    postgresUser: anchoreengine
    probes:
      liveness:
        failureThreshold: 6
        initialDelay: 60
        timeoutSeconds: 5
      readiness:
        initialDelay: 5
        periodSeconds: 5
        timeoutSeconds: 3
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
    service:
      externalIPs: []
      port: 5432
      type: ClusterIP
    tolerations: []
    usePasswordFile: false
  anchore-ui-redis:
    cluster:
      enabled: false
      slaveCount: 2
    clusterDomain: cluster.local
    configmap: |-
      # Enable AOF https://redis.io/topics/persistence#append-only-file
      appendonly yes
      # Disable RDB persistence, AOF persistence already enabled.
      save ""
    externalEndpoint: null
    global:
      redis: {}
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/redis
      tag: 6.0.8-debian-10-r0
    master:
      affinity: {}
      command: /run.sh
      configmap: null
      customLivenessProbe: {}
      customReadinessProbe: {}
      disableCommands:
      - FLUSHDB
      - FLUSHALL
      extraEnvVars: []
      extraEnvVarsCM: []
      extraEnvVarsSecret: []
      extraFlags: []
      livenessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      persistence:
        accessModes:
        - ReadWriteOnce
        enabled: true
        matchExpressions: {}
        matchLabels: {}
        path: /data
        size: 8Gi
        subPath: ""
      podAnnotations: {}
      podLabels: {}
      priorityClassName: {}
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      service:
        annotations: {}
        labels: {}
        loadBalancerIP: null
        port: 6379
        type: ClusterIP
      shareProcessNamespace: false
      statefulset:
        updateStrategy: RollingUpdate
    metrics:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: bitnami/redis-exporter
        tag: 1.11.1-debian-10-r12
      podAnnotations:
        prometheus.io/port: "9121"
        prometheus.io/scrape: "true"
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      service:
        annotations: {}
        labels: {}
        type: ClusterIP
      serviceMonitor:
        enabled: false
        selector:
          prometheus: kube-prometheus
    networkPolicy:
      enabled: false
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    password: anchore-redis,123
    persistence:
      enabled: false
      existingClaim: null
    podDisruptionBudget:
      enabled: false
      minAvailable: 1
    podSecurityPolicy:
      create: false
    rbac:
      create: false
      role:
        rules: []
    redisPort: 6379
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    sentinel:
      configmap: null
      customLivenessProbe: {}
      customReadinessProbe: {}
      downAfterMilliseconds: 60000
      enabled: false
      failoverTimeout: 18000
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: bitnami/redis-sentinel
        tag: 6.0.8-debian-10-r1
      initialCheckTimeout: 5
      livenessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      masterSet: mymaster
      parallelSyncs: 1
      port: 26379
      quorum: 2
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      service:
        annotations: {}
        labels: {}
        loadBalancerIP: null
        redisPort: 6379
        sentinelPort: 26379
        type: ClusterIP
      staticID: false
      usePassword: true
    serviceAccount:
      create: false
      name: null
    slave:
      affinity: {}
      command: /run.sh
      configmap: null
      customLivenessProbe: {}
      customReadinessProbe: {}
      disableCommands:
      - FLUSHDB
      - FLUSHALL
      extraEnvVars: []
      extraEnvVarsCM: []
      extraEnvVarsSecret: []
      extraFlags: []
      livenessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      persistence:
        accessModes:
        - ReadWriteOnce
        enabled: true
        matchExpressions: {}
        matchLabels: {}
        path: /data
        size: 8Gi
        subPath: ""
      podAnnotations: {}
      podLabels: {}
      port: 6379
      readinessProbe:
        enabled: true
        failureThreshold: 5
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      service:
        annotations: {}
        labels: {}
        loadBalancerIP: null
        port: 6379
        type: ClusterIP
      shareProcessNamespace: false
      spreadConstraints: {}
      statefulset:
        updateStrategy: RollingUpdate
    sysctlImage:
      command: []
      enabled: false
      mountHostSys: false
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/minideb
      resources: {}
      tag: buster
    tls:
      authClients: true
      certCAFilename: null
      certFilename: null
      certKeyFilename: null
      certificatesSecret: null
      enabled: false
    usePassword: true
    usePasswordFile: false
    volumePermissions:
      enabled: false
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/minideb
        tag: buster
      resources: {}
  anchoreAnalyzer:
    affinity: {}
    annotations: {}
    concurrentTasksPerWorker: 1
    configFile:
      retrieve_files:
        file_list:
        - /etc/passwd
      secret_search:
        match_params:
        - MAXFILESIZE=10000
        - STOREONMATCH=n
        regexp_match:
        - AWS_ACCESS_KEY=(?i).*aws_access_key_id( *=+ *).*(?<![A-Z0-9])[A-Z0-9]{20}(?![A-Z0-9]).*
        - AWS_SECRET_KEY=(?i).*aws_secret_access_key( *=+ *).*(?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=]).*
        - PRIV_KEY=(?i)-+BEGIN(.*)PRIVATE KEY-+
        - 'DOCKER_AUTH=(?i).*"auth": *".+"'
        - API_KEY=(?i).*api(-|_)key( *=+ *).*(?<![A-Z0-9])[A-Z0-9]{20,60}(?![A-Z0-9]).*
    containerPort: 8084
    cycleTimers:
      image_analyzer: 5
    enableHints: false
    extraEnv: []
    labels: {}
    layerCacheMaxGigabytes: 0
    nodeSelector: {}
    replicaCount: 1
    tolerations: []
  anchoreApi:
    affinity: {}
    annotations: {}
    extraEnv: []
    labels: {}
    nodeSelector: {}
    replicaCount: 1
    service:
      annotations: {}
      label: {}
      port: 8228
      type: ClusterIP
    tolerations: []
  anchoreCatalog:
    affinity: {}
    analysis_archive:
      compression:
        enabled: true
        min_size_kbytes: 100
      storage_driver:
        config: {}
        name: db
    annotations: {}
    cycleTimers:
      analyzer_queue: 1
      archive_tasks: 43200
      image_gc: 60
      image_watcher: 3600
      notifications: 30
      policy_eval: 3600
      repo_watcher: 60
      service_watcher: 15
      vulnerability_scan: 14400
    events:
      notification:
        enabled: false
        level:
        - error
    extraEnv: []
    labels: {}
    nodeSelector: {}
    object_store:
      compression:
        enabled: true
        min_size_kbytes: 100
      storage_driver:
        config: {}
        name: db
    replicaCount: 1
    service:
      annotations: {}
      labels: {}
      port: 8082
      type: ClusterIP
    tolerations: []
  anchoreEngineUpgradeJob:
    affinity: {}
    annotations: {}
    enabled: true
    nodeSelector: {}
    tolerations: []
  anchoreEnterpriseEngineUpgradeJob:
    affinity: {}
    annotations: {}
    enabled: true
    nodeSelector: {}
    tolerations: []
  anchoreEnterpriseFeeds:
    affinity: {}
    annotations: {}
    cycleTimers:
      driver_sync: 7200
    dbConfig:
      connectionPoolMaxOverflow: 100
      connectionPoolSize: 30
      engineArgs: {}
      ssl: false
      sslMode: verify-full
      sslRootCertName: null
      timeout: 120
    enabled: true
    existingSecret: null
    extraEnv: []
    githubDriverEnabled: false
    githubDriverToken: null
    labels: {}
    msrcApiKey: null
    msrcDriverEnabled: false
    nodeSelector: {}
    service:
      annotations: {}
      labels: {}
      port: 8448
      type: ClusterIP
    tolerations: []
    url: ""
  anchoreEnterpriseFeedsUpgradeJob:
    affinity: {}
    annotations: {}
    enabled: true
    nodeSelector: {}
    tolerations: []
  anchoreEnterpriseGlobal:
    enabled: false
    image: docker.io/anchore/enterprise:v3.0.0
    imagePullPolicy: IfNotPresent
    imagePullSecretName: anchore-enterprise-pullcreds
    licenseSecretName: anchore-enterprise-license
  anchoreEnterpriseNotifications:
    affinity: {}
    annotations: {}
    cycleTimers:
      notifications: 30
    enabled: true
    extraEnv: []
    labels: {}
    nodeSelector: {}
    service:
      port: 8668
    tolerations: []
  anchoreEnterpriseRbac:
    enabled: true
    extraEnv: []
    service:
      apiPort: 8229
      authPort: 8089
  anchoreEnterpriseReports:
    affinity: {}
    annotations: {}
    cycleTimers:
      reports_data_load: 600
      reports_data_refresh: 7200
      reports_metrics: 3600
    enableDataIngress: true
    enableGraphql: true
    enabled: true
    extraEnv: []
    labels: {}
    nodeSelector: {}
    service:
      port: 8558
    tolerations: []
  anchoreEnterpriseUi:
    affinity: {}
    annotations: {}
    enableProxy: false
    enableSharedLogin: true
    enableSsl: false
    enabled: true
    existingSecret: null
    extraEnv: []
    image: docker.io/anchore/enterprise-ui:v3.0.0
    imagePullPolicy: IfNotPresent
    labels: {}
    ldapsRootCaCertName: null
    nodeSelector: {}
    redisFlushdb: true
    service:
      annotations: {}
      labels: {}
      port: 80
      sessionAffinity: ClientIP
      type: ClusterIP
    tolerations: []
  anchoreGlobal:
    allowECRUseIAMRole: false
    annotations: {}
    certStoreSecretName: null
    dbConfig:
      connectionPoolMaxOverflow: 100
      connectionPoolSize: 30
      engineArgs: {}
      ssl: false
      sslMode: verify-full
      sslRootCertName: null
      timeout: 120
    defaultAdminEmail: example@email.com
    defaultAdminPassword: null
    enableMetrics: false
    existingSecret: null
    extraEnv: []
    hashedPasswords: false
    image: docker.io/anchore/anchore-engine:v0.9.1
    imageAnalyzeTimeoutSeconds: 36000
    imagePullPolicy: IfNotPresent
    imagePullSecretName: null
    internalServicesSsl:
      certSecretCertName: null
      certSecretKeyName: null
      enabled: false
      verifyCerts: false
    labels: {}
    logLevel: INFO
    metricsAuthDisabled: false
    oauthEnabled: false
    oauthTokenExpirationSeconds: 3600
    openShiftDeployment: false
    policyBundles: null
    probes:
      liveness:
        failureThreshold: 6
        initialDelaySeconds: 120
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      readiness:
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
    saml:
      privateKeyName: null
      publicKeyName: null
      secret: null
      useExistingSecret: false
    scratchVolume:
      details:
        emptyDir: {}
      fixGroupPermissions: false
      mountPath: /analysis_scratch
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsUser: 1000
    serviceAccountName: null
    serviceDir: /anchore_service
    webhooks:
      general: {}
      ssl_verify: true
      webhook_pass: null
      webhook_user: null
    webhooksEnabled: false
  anchorePolicyEngine:
    affinity: {}
    annotations: {}
    cycleTimers:
      feed_sync: 14400
      feed_sync_checker: 3600
    extraEnv: []
    labels: {}
    nodeSelector: {}
    replicaCount: 1
    service:
      annotations: {}
      labels: {}
      port: 8087
      type: ClusterIP
    tolerations: []
  anchoreSimpleQueue:
    affinity: {}
    annotations: {}
    extraEnv: []
    labels: {}
    nodeSelector: {}
    replicaCount: 1
    service:
      annotations: {}
      labels: {}
      port: 8083
      type: ClusterIP
    tolerations: []
  cloudsql:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      repository: gcr.io/cloudsql-docker/gce-proxy
      tag: 1.12
    instance: ""
  ingress:
    annotations:
      kubernetes.io/ingress.class: nginx
    apiPath: /v1/
    enabled: false
    labels: {}
    tls: []
    uiPath: /
  postgresql:
    affinity: {}
    deploymentAnnotations: {}
    externalEndpoint: null
    extraEnv: []
    global: {}
    image: postgres:9.6.18
    metrics:
      enabled: false
      image: wrouesnel/postgres_exporter
      imagePullPolicy: IfNotPresent
      imageTag: v0.4.6
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
    networkPolicy:
      allowExternal: true
      enabled: false
    nodeSelector: {}
    persistence:
      accessMode: ReadWriteOnce
      enabled: true
      mountPath: /var/lib/postgresql/data/pgdata
      resourcePolicy: nil
      size: 20Gi
      subPath: postgresql-db
    podAnnotations: {}
    postgresDatabase: anchore
    postgresPassword: anchore-postgres,123
    postgresUser: anchoreengine
    probes:
      liveness:
        failureThreshold: 6
        initialDelay: 60
        timeoutSeconds: 5
      readiness:
        initialDelay: 5
        periodSeconds: 5
        timeoutSeconds: 3
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
    service:
      externalIPs: []
      port: 5432
      type: ClusterIP
    tolerations: []
    usePasswordFile: false
  
  
